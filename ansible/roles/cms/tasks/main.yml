---
# tasks file for cms

- name: create postgres user
  postgresql_user: name="{{ django_db_username }}"
                   password="{{ vault_django_db_password }}"
                   state=present
                   login_host="{{ django_db_host }}"
                   port="{{ django_db_port }}"
                   login_user="{{ master_db_user }}"
                   login_password="{{ vault_master_db_password }}"

- name: create postgres db
  postgresql_db: name="{{ django_db_name }}"
                 encoding='UTF-8'
                 lc_collate='nb_NO.UTF-8'
                 lc_ctype='nb_NO.UTF-8'
                 template='template0'
                 owner="{{ django_db_username }}"
                 state=present
                 login_host="{{ django_db_host }}"
                 port="{{ django_db_port }}"
                 login_user="{{ master_db_user }}"
                 login_password="{{ vault_master_db_password }}"
                 
- name: checkout app code 
  git: repo="{{ app_repo }}"
    dest="{{ ansible_env.HOME }}/{{ app_dir }}"
    version=master

- name: check for virtualenv
  stat: path="{{ ansible_env.HOME }}/.virtualenvs/{{ cms_virtualenv }}"
  register: venv_file
- debug: msg="{{ ansible_env.HOME }}/.virtualenvs/{{ cms_virtualenv }} exists {{ venv_file.stat.exists }}"

- name: make sure virtualenv exists
  shell: "source `which virtualenvwrapper.sh` && mkvirtualenv {{ cms_virtualenv }}" 
  args:
    executable: /bin/bash
  register: run_cmd
  when: not venv_file.stat.exists
- debug: var=run_cmd.stdout_lines
  when: run_cmd.stdout_lines is defined

- name: install python modules into virtualenv
  pip: requirements="{{ ansible_env.HOME }}/{{ app_dir }}/django/requirements.txt" 
    virtualenv="{{ ansible_env.HOME }}/.virtualenvs/{{ cms_virtualenv }}"
  when: venv_file.stat.exists